package org.game;

import org.game.TicTacToe;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.game.TicTacToe.board;
import static org.game.TicTacToe.createBoard;
import static org.junit.Assert.*;
import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;

public class TicTacToeTest {

    @BeforeEach
    public void setup(){
      //  String[] board;
        String turn;
        int playerChoice;
        char playerPiece = 0;
        turn = "X";
        createBoard();
    }

//    @Test
//    public void testGetPlayerChoice(){
//        Scanner mockScanner = PowerMockito.mock(Scanner.class);
//        PowerMockito.when(mockScanner.nextInt()).thenReturn(1);
//
//       // TicTacToe ticTacToe = new TicTacToe();
//        char result = TicTacToe.getPlayerChoice(mockScanner);
//
//        assertEquals('X', result);
//    }

    @Test
    public void createBoardTest() throws Exception {
        assertArrayEquals(new int[] {1,2,3,4,5,6,7,8,9}, new int[] {1,2,3,4,5,6,7,8,9});
    }

    @Test
    public void printBoardTest() {

    }

    @Test
    public void checkWinnerTestXWins() {
        board[0] = "X";
        board[1] = "X";
        board[2] = "X";

        assertEquals("X", TicTacToe.checkWinner());

    }

    @Test
    public void checkWinnerTestOWins() {

        board[3] = "O";
        board[4] = "O";
        board[5] = "O";

        assertEquals("O", TicTacToe.checkWinner());

    }


// Generated by CodiumAI



        // Should create a board of size 9
        @Test
        public void test_createBoardSize() {
            createBoard();
            assertEquals(9, board.length);
        }

        // Should initialize each element of the board with a string value of its index plus one
        @Test
        public void test_createBoardElements() {
            createBoard();
            for (int i = 0; i < board.length; i++) {
                assertEquals(String.valueOf(i + 1), board[i]);
            }
        }

        // Should not throw any exceptions
        @Test
        public void test_createBoardNoExceptions() {
            assertDoesNotThrow(TicTacToe::createBoard);
        }

        // Should create a board with the correct size even if the input is not 9
        @Test
        public void test_createBoardCustomSize() {
            createBoard();
            assertEquals(9, board.length);
        }

        // Should initialize each element of the board with the correct string value even if the input is not 9
        @Test
        public void test_createBoardCustomElements() {
            createBoard();
            for (int i = 0; i < board.length; i++) {
                assertEquals(String.valueOf(i + 1), board[i]);
            }
        }

        // None
        @Test
        public void test_createBoardNoBehaviour() {
            createBoard();
            // No specific behavior to test, just checking that the method runs without errors
        }

}
